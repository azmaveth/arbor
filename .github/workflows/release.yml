name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  MIX_ENV: prod

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release (contains alpha, beta, rc, or has more than 3 version parts)
        if [[ $VERSION =~ (alpha|beta|rc) ]] || [[ $(echo $VERSION | tr -cd '.' | wc -c) -gt 2 ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Release version: $VERSION"
        echo "Pre-release: $([ '${{ steps.version.outputs.is_prerelease }}' = 'true' ] && echo 'yes' || echo 'no')"

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.15.7'
        otp-version: '26.1'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: release-deps-${{ runner.os }}-26.1-1.15.7-${{ hashFiles('**/mix.lock') }}

    - name: Install dependencies
      run: |
        mix deps.get --only=prod
        mix deps.compile

    - name: Validate version consistency
      run: |
        MIX_VERSION=$(grep 'version:' mix.exs | sed 's/.*version: "\(.*\)".*/\1/')
        TAG_VERSION=${{ steps.version.outputs.version }}
        TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present
        
        echo "Mix.exs version: $MIX_VERSION"
        echo "Tag version: $TAG_VERSION"
        
        if [ "$MIX_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch between mix.exs ($MIX_VERSION) and tag ($TAG_VERSION)"
          exit 1
        else
          echo "✅ Version consistency validated"
        fi

    - name: Run full test suite
      run: |
        MIX_ENV=test mix test.all
        echo "✅ All tests passed"

  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.15.7'
        otp-version: '26.1'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: release-deps-${{ runner.os }}-26.1-1.15.7-${{ hashFiles('**/mix.lock') }}

    - name: Install dependencies
      run: |
        mix deps.get --only=prod
        mix deps.compile

    - name: Build production release
      run: |
        echo "Building production release..."
        scripts/release.sh --env prod --version ${{ needs.validate.outputs.version }}

    - name: Generate documentation
      run: |
        MIX_ENV=dev mix deps.get
        mix docs
        
    - name: Create release package
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        VERSION=${VERSION#v}  # Remove 'v' prefix
        
        # Create release directory structure
        mkdir -p release_package/arbor-${VERSION}
        
        # Copy release artifacts
        cp -r releases/prod/* release_package/arbor-${VERSION}/
        cp -r doc release_package/arbor-${VERSION}/
        cp README.md release_package/arbor-${VERSION}/
        cp CHANGELOG.md release_package/arbor-${VERSION}/ 2>/dev/null || echo "No CHANGELOG.md found"
        
        # Create installation script
        cat > release_package/arbor-${VERSION}/install.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "Installing Arbor..."
        # Installation logic would go here
        echo "Arbor installation completed!"
        EOF
        chmod +x release_package/arbor-${VERSION}/install.sh
        
        # Create tarball
        cd release_package
        tar -czf arbor-${VERSION}-linux-x86_64.tar.gz arbor-${VERSION}/
        
        # Calculate checksums
        sha256sum arbor-${VERSION}-linux-x86_64.tar.gz > arbor-${VERSION}-linux-x86_64.tar.gz.sha256

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          release_package/*.tar.gz
          release_package/*.sha256
        retention-days: 90

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.validate.outputs.version }}

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, docker]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts
        path: ./artifacts

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        
        # Generate release notes
        cat > release_notes.md << EOF
        # Arbor ${VERSION}
        
        ## What's Changed
        
        This release includes the following improvements and fixes:
        
        ### Features
        - Distributed agent orchestration system
        - Capability-based security model
        - Comprehensive telemetry and observability
        
        ### Infrastructure
        - Production-ready containerized deployment
        - Automated CI/CD pipeline
        - Security scanning and dependency auditing
        
        ## Installation
        
        ### Using Docker
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:${VERSION}
        \`\`\`
        
        ### Using Release Package
        \`\`\`bash
        wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/arbor-${VERSION#v}-linux-x86_64.tar.gz
        tar -xzf arbor-${VERSION#v}-linux-x86_64.tar.gz
        cd arbor-${VERSION#v}
        ./install.sh
        \`\`\`
        
        ## Verification
        
        Verify the integrity of the release package:
        \`\`\`bash
        sha256sum -c arbor-${VERSION#v}-linux-x86_64.tar.gz.sha256
        \`\`\`
        
        ## Documentation
        
        - [Architecture Overview](https://github.com/${{ github.repository }}/blob/${VERSION}/docs/arbor/01-overview/architecture-overview.md)
        - [Development Guide](https://github.com/${{ github.repository }}/blob/${VERSION}/scripts/README.md)
        - [API Documentation](https://github.com/${{ github.repository }}/releases/download/${VERSION}/docs.tar.gz)
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.1.0...${VERSION}
        EOF

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        release_name: Arbor ${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease }}

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/arbor-${{ needs.validate.outputs.version }}-linux-x86_64.tar.gz
        asset_name: arbor-${{ needs.validate.outputs.version }}-linux-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/arbor-${{ needs.validate.outputs.version }}-linux-x86_64.tar.gz.sha256
        asset_name: arbor-${{ needs.validate.outputs.version }}-linux-x86_64.tar.gz.sha256
        asset_content_type: text/plain

  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [validate, build, docker, github-release]
    if: always()

    steps:
    - name: Determine release status
      id: status
      run: |
        if [[ "${{ needs.github-release.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=🚀 Release ${{ needs.validate.outputs.version }} completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Release ${{ needs.validate.outputs.version }} failed" >> $GITHUB_OUTPUT
        fi

    - name: Create release summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-release**: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation**: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker**: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: ${{ needs.github-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY

    - name: Notify external systems
      if: success()
      run: |
        echo "Release completed successfully!"
        echo "Version: ${{ needs.validate.outputs.version }}"
        echo "Docker image: ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.version }}"
        # In production, this would:
        # - Update deployment systems
        # - Notify team channels
        # - Update documentation sites
        # - Trigger downstream deployments