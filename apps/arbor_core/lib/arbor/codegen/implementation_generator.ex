defmodule Arbor.CodeGen.ImplementationGenerator do
  @moduledoc """
  Orchestrates the generation of a contract implementation.
  """
  alias Arbor.CodeGen.{ContractAnalyzer, FileGenerator}

  @doc """
  Generates an implementation module for a given contract.

  This function analyzes the contract, generates the implementation code as a string,
  and writes it to the appropriate file.
  """
  @spec generate(contract :: module(), implementation :: module()) ::
          {:ok, file_path :: String.t()} | {:error, atom() | String.t() | {atom(), String.t()}}
  def generate(contract_module, implementation_module) do
    with {:ok, callbacks} <- ContractAnalyzer.analyze(contract_module),
         code <- generate_module_code(contract_module, implementation_module, callbacks) do
      FileGenerator.write_file(implementation_module, code)
    else
      {:error, reason} -> {:error, reason}
    end
  end

  defp generate_module_code(contract_module, implementation_module, callbacks) do
    """
    defmodule #{inspect(implementation_module)} do
      @moduledoc \"\"\"
      Implementation of the `#{inspect(contract_module)}` contract.

      This module was generated by `mix arbor.gen.impl`.
      TODO: Add a proper module description.
      \"\"\"

      @behaviour #{inspect(contract_module)}

      #{generate_callbacks(callbacks)}
    end
    """
  end

  defp generate_callbacks(callbacks) do
    Enum.map_join(callbacks, "\n\n", &generate_callback/1)
  end

  defp generate_callback(callback) do
    """
    #{generate_doc(callback)}
      @impl true
      def #{callback.name}(#{generate_args(callback.arity)}) do
        # TODO: Implement this callback.
        {:error, :not_implemented}
      end
    """
  end

  defp generate_doc(%{doc: doc}) when is_binary(doc) and doc != "" do
    """
      @doc \"\"\"
      #{String.trim(doc)}
      \"\"\"
    """
  end

  defp generate_doc(_), do: "  @doc false"

  defp generate_args(0), do: ""

  defp generate_args(arity) when arity > 0 do
    Enum.map_join(1..arity, ", ", &"arg#{&1}")
  end
end
